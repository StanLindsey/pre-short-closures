<?php

macro ·recursion {
    ·chain(
        ·token("("),
        ·optional(
            ·ls(
                ·chain(
                    ·optional(·either(
                        ·ns(),
                        ·token(T_ARRAY),
                        ·token(T_CALLABLE)
                    ))·argType,
                    ·token(T_VARIABLE)·argName,
                    ·optional(·token("="))·argAssignmentEq,
                    ·optional(·expression())·argAssignmentVal
                )·arg,
                ·token(",")
            )
        )·args,
        ·token(")"),
        ·optional(
            ·chain(
                ·token(":"),
                ·either(
                    ·ns(),
                    ·token(T_ARRAY),
                    ·token(T_CALLABLE)
                )
            )
        )·returnType,
        ·either(
            ·token(T_DOUBLE_ARROW),
            ·buffer("⇒")
        ),
        ·token("{"),
        ·layer()·body,
        ·token("}"),
        ·_()·scope
    )
} >> function($ast) {
    $function = \Pre\Plugin\getFunction("shortClosersParser");
    $function($ast, $multiArgs = true);
} >> {··trim(
    ·scope ?·{
        ··trim(function (·args ···(, ) {··trim(·arg ··· { ·argType ·argName ·argAssignmentEq ·argAssignmentVal } )}) use (··trim(·scope ···(, ) {&·var})) ·returnType) {
            ··trim(·body)
        }
    }

    ·scope !·{
        ··trim(function (·args ···(, ) {··trim(·arg ··· { ·argType ·argName ·argAssignmentEq ·argAssignmentVal } )}) ·returnType) {
            ··trim(·body)
        }
    }
)}

macro ·recursion {
    ·chain(
        ·token("("),
        ·optional(
            ·ls(
                ·chain(
                    ·optional(·either(
                        ·ns(),
                        ·token(T_ARRAY),
                        ·token(T_CALLABLE)
                    ))·argType,
                    ·token(T_VARIABLE)·argName,
                    ·optional(·token("="))·argAssignmentEq,
                    ·optional(·expression())·argAssignmentVal
                )·arg,
                ·token(",")
            )
        )·args,
        ·token(")"),
        ·optional(
            ·chain(
                ·token(":"),
                ·either(
                    ·ns(),
                    ·token(T_ARRAY),
                    ·token(T_CALLABLE)
                )
            )
        )·returnType,
        ·either(
            ·token(T_DOUBLE_ARROW),
            ·buffer("⇒")
        ),
        ·expression()·body,
        ·_()·scope
    )
} >> function($ast) {
    $function = \Pre\Plugin\getFunction("shortClosersParser");
    $function($ast, $multiArgs = true);
} >> {··trim(
    ·scope ?·{
        ··trim(function (·args ···(, ) {··trim(·arg ··· { ·argType ·argName ·argAssignmentEq ·argAssignmentVal } )}) use (··trim(·scope ···(, ) {&·var})) ·returnType) {
            return ·body;
        }
    }

    ·scope !·{
        ··trim(function (·args ···(, ) {··trim(·arg ··· { ·argType ·argName ·argAssignmentEq ·argAssignmentVal } )}) ·returnType) {
            return ·body;
        }
    }
)}

macro ·recursion {
    ·chain(
        ·token(T_VARIABLE)·argName,
        ·buffer("⇒"),
        ·expression()·body,
        ·_()·scope
    )
} >> function($ast) {
    $function = \Pre\Plugin\getFunction("shortClosersParser");
    $function($ast, $multiArgs = false);
} >> {··trim(
    ·scope ?·{
        function (·argName) use (··trim(·scope ···(, ) {&·var})) {
            return ·body;
        }
    }

    ·scope !·{
        function (·argName) {
            return ·body;
        }
    }
)}

macro ·recursion {
    ·chain(
        ·token(T_VARIABLE)·argName,
        ·buffer("⇒"),
        ·token("{"),
        ·layer()·body,
        ·token("}"),
        ·_()·scope
    )
} >> function($ast) {
    $function = \Pre\Plugin\getFunction("shortClosersParser");
    $function($ast, $multiArgs = false);
} >> {··trim(
    ·scope ?·{
        function (·argName) use (··trim(·scope ···(, ) {&·var})) {
            ··trim(·body)
        }
    }

    ·scope !·{
        function (·argName) {
            ··trim(·body)
        }
    }
)}
